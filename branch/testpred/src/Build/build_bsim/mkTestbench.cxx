/*
 * Generated by Bluespec Compiler, version 2024.01 (build ae2a2fc6)
 * 
 * On Fri Oct  4 16:32:54 BST 2024
 * 
 */
#include "bluesim_primitives.h"
#include "mkTestbench.h"
#include "imported_BDPI_functions.h"


/* Literal declarations */
static unsigned int const UWide_literal_144_haaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa_arr[] = { 2863311530u,
											    2863311530u,
											    2863311530u,
											    2863311530u,
											    43690u };
static tUWide const UWide_literal_144_haaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(144u,
									    UWide_literal_144_haaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa_arr);
static unsigned int const UWide_literal_145_haaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa_arr[] = { 2863311530u,
											    2863311530u,
											    2863311530u,
											    2863311530u,
											    43690u };
static tUWide const UWide_literal_145_haaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(145u,
									    UWide_literal_145_haaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa_arr);


/* String declarations */
static std::string const __str_literal_2("BSV Predict IP: %d", 18u);
static std::string const __str_literal_3("BSV Update IP: %d, target : %d, taken: %d, Type %d:",
					 51u);
static std::string const __str_literal_1("DEBUG", 5u);
static std::string const __str_literal_4("Error: \"../testfsm.bsv\", line 70, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l70c29] and\n  [RL_action_l71c9, RL_action_l73c15, RL_action_l75c28, RL_action_l76c45,\n  RL_action_l77c33, RL_action_l80c24, RL_action_l81c38] ) fired in the same\n  clock cycle.\n",
					 286u);
static std::string const __str_literal_5("Error: \"../testfsm.bsv\", line 71, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l71c9] and\n  [RL_action_l73c15, RL_action_l75c28, RL_action_l76c45, RL_action_l77c33,\n  RL_action_l80c24, RL_action_l81c38] ) fired in the same clock cycle.\n",
					 265u);
static std::string const __str_literal_6("Error: \"../testfsm.bsv\", line 73, column 15: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l73c15] and\n  [RL_action_l75c28, RL_action_l76c45, RL_action_l77c33, RL_action_l80c24,\n  RL_action_l81c38] ) fired in the same clock cycle.\n",
					 249u);
static std::string const __str_literal_7("Error: \"../testfsm.bsv\", line 75, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l75c28] and\n  [RL_action_l76c45, RL_action_l77c33, RL_action_l80c24, RL_action_l81c38] )\n  fired in the same clock cycle.\n",
					 231u);
static std::string const __str_literal_8("Error: \"../testfsm.bsv\", line 76, column 45: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l76c45] and\n  [RL_action_l77c33, RL_action_l80c24, RL_action_l81c38] ) fired in the same\n  clock cycle.\n",
					 213u);
static std::string const __str_literal_9("Error: \"../testfsm.bsv\", line 77, column 33: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l77c33] and\n  [RL_action_l80c24, RL_action_l81c38] ) fired in the same clock cycle.\n",
					 193u);
static std::string const __str_literal_10("Error: \"../testfsm.bsv\", line 80, column 24: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l80c24] and\n  [RL_action_l81c38] ) fired in the same clock cycle.\n",
					  175u);


/* Constructor */
MOD_mkTestbench::MOD_mkTestbench(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_abort(simHdl, "abort", this, 1u, (tUInt8)0u),
    INST_debug(simHdl, "debug", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_message(simHdl,
		 "message",
		 this,
		 145u,
		 UWide_literal_145_haaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,
		 (tUInt8)0u),
    INST_prediction(simHdl, "prediction", this, 8u, (tUInt8)0u, (tUInt8)0u),
    INST_running(simHdl, "running", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_start_reg(simHdl, "start_reg", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_start_reg_1(simHdl, "start_reg_1", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_start_reg_2(simHdl, "start_reg_2", this, 1u, (tUInt8)0u),
    INST_start_wire(simHdl, "start_wire", this, 1u, (tUInt8)0u),
    INST_state_can_overlap(simHdl, "state_can_overlap", this, 1u, (tUInt8)1u, (tUInt8)0u),
    INST_state_fired(simHdl, "state_fired", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_state_fired_1(simHdl, "state_fired_1", this, 1u, (tUInt8)0u),
    INST_state_mkFSMstate(simHdl, "state_mkFSMstate", this, 4u, (tUInt8)0u, (tUInt8)0u),
    INST_state_overlap_pw(simHdl, "state_overlap_pw", this, 0u),
    INST_state_set_pw(simHdl, "state_set_pw", this, 0u),
    INST_update(simHdl,
		"update",
		this,
		144u,
		UWide_literal_144_haaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,
		(tUInt8)0u),
    PORT_RST_N((tUInt8)1u),
    DEF_message___d41(145u),
    DEF_TASK_recieve___d57(160u),
    DEF_TASK_testplusargs___d37((tUInt8)0u),
    DEF_update___d90(144u),
    DEF_TASK_recieve_7_BITS_145_TO_2___d60(144u),
    DEF_message_1_BITS_143_TO_0___d88(144u),
    DEF_IF_TASK_recieve_7_BITS_1_TO_0_8_EQ_1_9_THEN_TA_ETC___d67(144u),
    DEF_TASK_recieve_7_BITS_65_TO_2_1_CONCAT_TASK_reci_ETC___d66(144u),
    DEF_TASK_recieve_7_BITS_1_TO_0_8_EQ_1_9_CONCAT_IF__ETC___d68(145u),
    DEF_TASK_recieve_7_BITS_129_TO_66_2_CONCAT_TASK_re_ETC___d64(72u)
{
  symbol_count = 85u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTestbench::init_symbols_0()
{
  init_symbol(&symbols[0u], "__me_check_10", SYM_RULE);
  init_symbol(&symbols[1u], "__me_check_11", SYM_RULE);
  init_symbol(&symbols[2u], "__me_check_5", SYM_RULE);
  init_symbol(&symbols[3u], "__me_check_6", SYM_RULE);
  init_symbol(&symbols[4u], "__me_check_7", SYM_RULE);
  init_symbol(&symbols[5u], "__me_check_8", SYM_RULE);
  init_symbol(&symbols[6u], "__me_check_9", SYM_RULE);
  init_symbol(&symbols[7u], "abort", SYM_MODULE, &INST_abort);
  init_symbol(&symbols[8u], "CAN_FIRE___me_check_10", SYM_DEF, &DEF_CAN_FIRE___me_check_10, 1u);
  init_symbol(&symbols[9u], "CAN_FIRE___me_check_11", SYM_DEF, &DEF_CAN_FIRE___me_check_11, 1u);
  init_symbol(&symbols[10u], "CAN_FIRE___me_check_5", SYM_DEF, &DEF_CAN_FIRE___me_check_5, 1u);
  init_symbol(&symbols[11u], "CAN_FIRE___me_check_6", SYM_DEF, &DEF_CAN_FIRE___me_check_6, 1u);
  init_symbol(&symbols[12u], "CAN_FIRE___me_check_7", SYM_DEF, &DEF_CAN_FIRE___me_check_7, 1u);
  init_symbol(&symbols[13u], "CAN_FIRE___me_check_8", SYM_DEF, &DEF_CAN_FIRE___me_check_8, 1u);
  init_symbol(&symbols[14u], "CAN_FIRE___me_check_9", SYM_DEF, &DEF_CAN_FIRE___me_check_9, 1u);
  init_symbol(&symbols[15u],
	      "CAN_FIRE_RL_action_l70c29",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_action_l70c29,
	      1u);
  init_symbol(&symbols[16u], "CAN_FIRE_RL_action_l71c9", SYM_DEF, &DEF_CAN_FIRE_RL_action_l71c9, 1u);
  init_symbol(&symbols[17u],
	      "CAN_FIRE_RL_action_l73c15",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_action_l73c15,
	      1u);
  init_symbol(&symbols[18u],
	      "CAN_FIRE_RL_action_l75c28",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_action_l75c28,
	      1u);
  init_symbol(&symbols[19u],
	      "CAN_FIRE_RL_action_l76c45",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_action_l76c45,
	      1u);
  init_symbol(&symbols[20u],
	      "CAN_FIRE_RL_action_l77c33",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_action_l77c33,
	      1u);
  init_symbol(&symbols[21u],
	      "CAN_FIRE_RL_action_l80c24",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_action_l80c24,
	      1u);
  init_symbol(&symbols[22u],
	      "CAN_FIRE_RL_action_l81c38",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_action_l81c38,
	      1u);
  init_symbol(&symbols[23u], "CAN_FIRE_RL_auto_finish", SYM_DEF, &DEF_CAN_FIRE_RL_auto_finish, 1u);
  init_symbol(&symbols[24u], "CAN_FIRE_RL_auto_start", SYM_DEF, &DEF_CAN_FIRE_RL_auto_start, 1u);
  init_symbol(&symbols[25u], "CAN_FIRE_RL_fsm_start", SYM_DEF, &DEF_CAN_FIRE_RL_fsm_start, 1u);
  init_symbol(&symbols[26u], "CAN_FIRE_RL_restart", SYM_DEF, &DEF_CAN_FIRE_RL_restart, 1u);
  init_symbol(&symbols[27u],
	      "CAN_FIRE_RL_start_reg__dreg_update",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_start_reg__dreg_update,
	      1u);
  init_symbol(&symbols[28u], "CAN_FIRE_RL_state_every", SYM_DEF, &DEF_CAN_FIRE_RL_state_every, 1u);
  init_symbol(&symbols[29u],
	      "CAN_FIRE_RL_state_fired__dreg_update",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_state_fired__dreg_update,
	      1u);
  init_symbol(&symbols[30u],
	      "CAN_FIRE_RL_state_handle_abort",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_state_handle_abort,
	      1u);
  init_symbol(&symbols[31u], "debug", SYM_MODULE, &INST_debug);
  init_symbol(&symbols[32u], "message", SYM_MODULE, &INST_message);
  init_symbol(&symbols[33u], "prediction", SYM_MODULE, &INST_prediction);
  init_symbol(&symbols[34u], "RL_action_l70c29", SYM_RULE);
  init_symbol(&symbols[35u], "RL_action_l71c9", SYM_RULE);
  init_symbol(&symbols[36u], "RL_action_l73c15", SYM_RULE);
  init_symbol(&symbols[37u], "RL_action_l75c28", SYM_RULE);
  init_symbol(&symbols[38u], "RL_action_l76c45", SYM_RULE);
  init_symbol(&symbols[39u], "RL_action_l77c33", SYM_RULE);
  init_symbol(&symbols[40u], "RL_action_l80c24", SYM_RULE);
  init_symbol(&symbols[41u], "RL_action_l81c38", SYM_RULE);
  init_symbol(&symbols[42u], "RL_auto_finish", SYM_RULE);
  init_symbol(&symbols[43u], "RL_auto_start", SYM_RULE);
  init_symbol(&symbols[44u], "RL_fsm_start", SYM_RULE);
  init_symbol(&symbols[45u], "RL_restart", SYM_RULE);
  init_symbol(&symbols[46u], "RL_start_reg__dreg_update", SYM_RULE);
  init_symbol(&symbols[47u], "RL_state_every", SYM_RULE);
  init_symbol(&symbols[48u], "RL_state_fired__dreg_update", SYM_RULE);
  init_symbol(&symbols[49u], "RL_state_handle_abort", SYM_RULE);
  init_symbol(&symbols[50u], "running", SYM_MODULE, &INST_running);
  init_symbol(&symbols[51u], "start_reg", SYM_MODULE, &INST_start_reg);
  init_symbol(&symbols[52u], "start_reg_1", SYM_MODULE, &INST_start_reg_1);
  init_symbol(&symbols[53u], "start_reg_2", SYM_MODULE, &INST_start_reg_2);
  init_symbol(&symbols[54u], "start_wire", SYM_MODULE, &INST_start_wire);
  init_symbol(&symbols[55u], "state_can_overlap", SYM_MODULE, &INST_state_can_overlap);
  init_symbol(&symbols[56u], "state_fired", SYM_MODULE, &INST_state_fired);
  init_symbol(&symbols[57u], "state_fired_1", SYM_MODULE, &INST_state_fired_1);
  init_symbol(&symbols[58u], "state_mkFSMstate", SYM_MODULE, &INST_state_mkFSMstate);
  init_symbol(&symbols[59u], "state_overlap_pw", SYM_MODULE, &INST_state_overlap_pw);
  init_symbol(&symbols[60u], "state_set_pw", SYM_MODULE, &INST_state_set_pw);
  init_symbol(&symbols[61u], "update", SYM_MODULE, &INST_update);
  init_symbol(&symbols[62u], "WILL_FIRE___me_check_10", SYM_DEF, &DEF_WILL_FIRE___me_check_10, 1u);
  init_symbol(&symbols[63u], "WILL_FIRE___me_check_11", SYM_DEF, &DEF_WILL_FIRE___me_check_11, 1u);
  init_symbol(&symbols[64u], "WILL_FIRE___me_check_5", SYM_DEF, &DEF_WILL_FIRE___me_check_5, 1u);
  init_symbol(&symbols[65u], "WILL_FIRE___me_check_6", SYM_DEF, &DEF_WILL_FIRE___me_check_6, 1u);
  init_symbol(&symbols[66u], "WILL_FIRE___me_check_7", SYM_DEF, &DEF_WILL_FIRE___me_check_7, 1u);
  init_symbol(&symbols[67u], "WILL_FIRE___me_check_8", SYM_DEF, &DEF_WILL_FIRE___me_check_8, 1u);
  init_symbol(&symbols[68u], "WILL_FIRE___me_check_9", SYM_DEF, &DEF_WILL_FIRE___me_check_9, 1u);
  init_symbol(&symbols[69u],
	      "WILL_FIRE_RL_action_l70c29",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l70c29,
	      1u);
  init_symbol(&symbols[70u],
	      "WILL_FIRE_RL_action_l71c9",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l71c9,
	      1u);
  init_symbol(&symbols[71u],
	      "WILL_FIRE_RL_action_l73c15",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l73c15,
	      1u);
  init_symbol(&symbols[72u],
	      "WILL_FIRE_RL_action_l75c28",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l75c28,
	      1u);
  init_symbol(&symbols[73u],
	      "WILL_FIRE_RL_action_l76c45",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l76c45,
	      1u);
  init_symbol(&symbols[74u],
	      "WILL_FIRE_RL_action_l77c33",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l77c33,
	      1u);
  init_symbol(&symbols[75u],
	      "WILL_FIRE_RL_action_l80c24",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l80c24,
	      1u);
  init_symbol(&symbols[76u],
	      "WILL_FIRE_RL_action_l81c38",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l81c38,
	      1u);
  init_symbol(&symbols[77u], "WILL_FIRE_RL_auto_finish", SYM_DEF, &DEF_WILL_FIRE_RL_auto_finish, 1u);
  init_symbol(&symbols[78u], "WILL_FIRE_RL_auto_start", SYM_DEF, &DEF_WILL_FIRE_RL_auto_start, 1u);
  init_symbol(&symbols[79u], "WILL_FIRE_RL_fsm_start", SYM_DEF, &DEF_WILL_FIRE_RL_fsm_start, 1u);
  init_symbol(&symbols[80u], "WILL_FIRE_RL_restart", SYM_DEF, &DEF_WILL_FIRE_RL_restart, 1u);
  init_symbol(&symbols[81u],
	      "WILL_FIRE_RL_start_reg__dreg_update",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_start_reg__dreg_update,
	      1u);
  init_symbol(&symbols[82u], "WILL_FIRE_RL_state_every", SYM_DEF, &DEF_WILL_FIRE_RL_state_every, 1u);
  init_symbol(&symbols[83u],
	      "WILL_FIRE_RL_state_fired__dreg_update",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_state_fired__dreg_update,
	      1u);
  init_symbol(&symbols[84u],
	      "WILL_FIRE_RL_state_handle_abort",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_state_handle_abort,
	      1u);
}


/* Rule actions */

void MOD_mkTestbench::RL_start_reg__dreg_update()
{
  tUInt8 DEF_start_reg_2_whas_AND_start_reg_2_wget___d3;
  DEF_start_reg_2_whas_AND_start_reg_2_wget___d3 = INST_start_reg_2.METH_whas() && INST_start_reg_2.METH_wget();
  INST_start_reg_1.METH_write(DEF_start_reg_2_whas_AND_start_reg_2_wget___d3);
}

void MOD_mkTestbench::RL_state_handle_abort()
{
  INST_state_mkFSMstate.METH_write((tUInt8)0u);
}

void MOD_mkTestbench::RL_state_fired__dreg_update()
{
  tUInt8 DEF_state_fired_1_whas__3_AND_state_fired_1_wget__4___d15;
  DEF_state_fired_1_whas__3_AND_state_fired_1_wget__4___d15 = INST_state_fired_1.METH_whas() && INST_state_fired_1.METH_wget();
  INST_state_fired.METH_write(DEF_state_fired_1_whas__3_AND_state_fired_1_wget__4___d15);
}

void MOD_mkTestbench::RL_state_every()
{
  tUInt8 DEF_state_set_pw_whas__6_OR_NOT_state_overlap_pw_w_ETC___d21;
  tUInt8 DEF_state_can_overlap__h3963;
  DEF_state_can_overlap__h3963 = INST_state_can_overlap.METH_read();
  DEF_state_set_pw_whas__6_OR_NOT_state_overlap_pw_w_ETC___d21 = INST_state_set_pw.METH_whas() || (!INST_state_overlap_pw.METH_whas() && DEF_state_can_overlap__h3963);
  INST_state_can_overlap.METH_write(DEF_state_set_pw_whas__6_OR_NOT_state_overlap_pw_w_ETC___d21);
}

void MOD_mkTestbench::RL_restart()
{
  INST_start_wire.METH_wset((tUInt8)1u);
  INST_start_reg_2.METH_wset((tUInt8)1u);
}

void MOD_mkTestbench::RL_action_l70c29()
{
  INST_state_mkFSMstate.METH_write((tUInt8)1u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    set_file_descriptors();
}

void MOD_mkTestbench::RL_action_l71c9()
{
  INST_state_mkFSMstate.METH_write((tUInt8)2u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    DEF_TASK_testplusargs___d37 = dollar_test_dollar_plusargs(sim_hdl, "s", &__str_literal_1);
  INST_debug.METH_write(DEF_TASK_testplusargs___d37);
}

void MOD_mkTestbench::RL_action_l73c15()
{
  tUInt8 DEF_TASK_recieve_7_BITS_1_TO_0_8_EQ_1___d59;
  INST_state_mkFSMstate.METH_write((tUInt8)3u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    recieve(DEF_TASK_recieve___d57.data);
  wop_primExtractWide(144u,
		      160u,
		      DEF_TASK_recieve___d57,
		      32u,
		      145u,
		      32u,
		      2u,
		      DEF_TASK_recieve_7_BITS_145_TO_2___d60);
  DEF_TASK_recieve_7_BITS_1_TO_0_8_EQ_1___d59 = DEF_TASK_recieve___d57.get_bits_in_word8(0u,
											 0u,
											 2u) == (tUInt8)1u;
  DEF_TASK_recieve_7_BITS_129_TO_66_2_CONCAT_TASK_re_ETC___d64.set_bits_in_word(primExtract8(8u,
											     160u,
											     DEF_TASK_recieve___d57,
											     32u,
											     129u,
											     32u,
											     122u),
										2u,
										0u,
										8u).set_whole_word(primExtract32(32u,
														 160u,
														 DEF_TASK_recieve___d57,
														 32u,
														 121u,
														 32u,
														 90u),
												   1u).set_whole_word((DEF_TASK_recieve___d57.get_bits_in_word32(2u,
																				 2u,
																				 24u) << 8u) | (tUInt32)(DEF_TASK_recieve___d57.get_bits_in_word8(4u,
																												  2u,
																												  8u)),
														      0u);
  DEF_TASK_recieve_7_BITS_65_TO_2_1_CONCAT_TASK_reci_ETC___d66.set_bits_in_word(primExtract32(16u,
											      160u,
											      DEF_TASK_recieve___d57,
											      32u,
											      65u,
											      32u,
											      50u),
										4u,
										0u,
										16u).set_whole_word(primExtract32(32u,
														  160u,
														  DEF_TASK_recieve___d57,
														  32u,
														  49u,
														  32u,
														  18u),
												    3u).set_whole_word((DEF_TASK_recieve___d57.get_bits_in_word32(0u,
																				  2u,
																				  16u) << 16u) | primExtract32(16u,
																							       72u,
																							       DEF_TASK_recieve_7_BITS_129_TO_66_2_CONCAT_TASK_re_ETC___d64,
																							       32u,
																							       71u,
																							       32u,
																							       56u),
														       2u).set_whole_word(primExtract32(32u,
																			72u,
																			DEF_TASK_recieve_7_BITS_129_TO_66_2_CONCAT_TASK_re_ETC___d64,
																			32u,
																			55u,
																			32u,
																			24u),
																	  1u).set_whole_word((DEF_TASK_recieve_7_BITS_129_TO_66_2_CONCAT_TASK_re_ETC___d64.get_bits_in_word32(0u,
																													      0u,
																													      24u) << 8u) | (tUInt32)(DEF_TASK_recieve___d57.get_bits_in_word8(4u,
																																					       10u,
																																					       8u)),
																			     0u);
  DEF_IF_TASK_recieve_7_BITS_1_TO_0_8_EQ_1_9_THEN_TA_ETC___d67 = DEF_TASK_recieve_7_BITS_1_TO_0_8_EQ_1___d59 ? DEF_TASK_recieve_7_BITS_145_TO_2___d60 : DEF_TASK_recieve_7_BITS_65_TO_2_1_CONCAT_TASK_reci_ETC___d66;
  DEF_TASK_recieve_7_BITS_1_TO_0_8_EQ_1_9_CONCAT_IF__ETC___d68.set_bits_in_word(131071u & ((((tUInt32)(DEF_TASK_recieve_7_BITS_1_TO_0_8_EQ_1___d59)) << 16u) | DEF_IF_TASK_recieve_7_BITS_1_TO_0_8_EQ_1_9_THEN_TA_ETC___d67.get_bits_in_word32(4u,
																													       0u,
																													       16u)),
										4u,
										0u,
										17u).set_whole_word(DEF_IF_TASK_recieve_7_BITS_1_TO_0_8_EQ_1_9_THEN_TA_ETC___d67.get_whole_word(3u),
												    3u).set_whole_word(DEF_IF_TASK_recieve_7_BITS_1_TO_0_8_EQ_1_9_THEN_TA_ETC___d67.get_whole_word(2u),
														       2u).set_whole_word(DEF_IF_TASK_recieve_7_BITS_1_TO_0_8_EQ_1_9_THEN_TA_ETC___d67.get_whole_word(1u),
																	  1u).set_whole_word(DEF_IF_TASK_recieve_7_BITS_1_TO_0_8_EQ_1_9_THEN_TA_ETC___d67.get_whole_word(0u),
																			     0u);
  INST_message.METH_write(DEF_TASK_recieve_7_BITS_1_TO_0_8_EQ_1_9_CONCAT_IF__ETC___d68);
}

void MOD_mkTestbench::RL_action_l75c28()
{
  INST_state_mkFSMstate.METH_write((tUInt8)4u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  INST_prediction.METH_write((tUInt8)1u);
}

void MOD_mkTestbench::RL_action_l76c45()
{
  tUInt64 DEF_unsigned_IF_message_1_BIT_144_2_THEN_message__ETC___d77;
  DEF_message___d41 = INST_message.METH_read();
  DEF_unsigned_IF_message_1_BIT_144_2_THEN_message__ETC___d77 = primExtract64(64u,
									      145u,
									      DEF_message___d41,
									      32u,
									      63u,
									      32u,
									      0u);
  INST_state_mkFSMstate.METH_write((tUInt8)5u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl,
		   this,
		   "s,64",
		   &__str_literal_2,
		   DEF_unsigned_IF_message_1_BIT_144_2_THEN_message__ETC___d77);
}

void MOD_mkTestbench::RL_action_l77c33()
{
  tUInt8 DEF_prediction___d83;
  DEF_prediction___d83 = INST_prediction.METH_read();
  INST_state_mkFSMstate.METH_write((tUInt8)6u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    branch_pred_resp(DEF_prediction___d83);
}

void MOD_mkTestbench::RL_action_l80c24()
{
  DEF_message___d41 = INST_message.METH_read();
  wop_primExtractWide(144u,
		      145u,
		      DEF_message___d41,
		      32u,
		      143u,
		      32u,
		      0u,
		      DEF_message_1_BITS_143_TO_0___d88);
  INST_state_mkFSMstate.METH_write((tUInt8)7u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  INST_update.METH_write(DEF_message_1_BITS_143_TO_0___d88);
}

void MOD_mkTestbench::RL_action_l81c38()
{
  tUInt8 DEF_unsigned_update_0_BITS_7_TO_0_7___d98;
  tUInt8 DEF_unsigned_update_0_BITS_15_TO_8_5___d96;
  tUInt64 DEF_unsigned_update_0_BITS_143_TO_80_1___d92;
  tUInt64 DEF_unsigned_update_0_BITS_79_TO_16_3___d94;
  DEF_update___d90 = INST_update.METH_read();
  DEF_unsigned_update_0_BITS_79_TO_16_3___d94 = primExtract64(64u,
							      144u,
							      DEF_update___d90,
							      32u,
							      79u,
							      32u,
							      16u);
  DEF_unsigned_update_0_BITS_143_TO_80_1___d92 = primExtract64(64u,
							       144u,
							       DEF_update___d90,
							       32u,
							       143u,
							       32u,
							       80u);
  DEF_unsigned_update_0_BITS_15_TO_8_5___d96 = DEF_update___d90.get_bits_in_word8(0u, 8u, 8u);
  DEF_unsigned_update_0_BITS_7_TO_0_7___d98 = DEF_update___d90.get_bits_in_word8(0u, 0u, 8u);
  INST_state_mkFSMstate.METH_write((tUInt8)8u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl,
		   this,
		   "s,64,64,8,8",
		   &__str_literal_3,
		   DEF_unsigned_update_0_BITS_143_TO_80_1___d92,
		   DEF_unsigned_update_0_BITS_79_TO_16_3___d94,
		   DEF_unsigned_update_0_BITS_15_TO_8_5___d96,
		   DEF_unsigned_update_0_BITS_7_TO_0_7___d98);
}

void MOD_mkTestbench::RL_fsm_start()
{
  INST_start_wire.METH_wset((tUInt8)1u);
  INST_start_reg_2.METH_wset((tUInt8)1u);
  INST_start_reg.METH_write((tUInt8)0u);
}

void MOD_mkTestbench::RL_auto_start()
{
  INST_start_reg.METH_write((tUInt8)1u);
  INST_running.METH_write((tUInt8)1u);
}

void MOD_mkTestbench::RL_auto_finish()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_finish(sim_hdl, "32", 0u);
}

void MOD_mkTestbench::__me_check_5()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l70c29 && ((((((DEF_WILL_FIRE_RL_action_l71c9 || DEF_WILL_FIRE_RL_action_l73c15) || DEF_WILL_FIRE_RL_action_l75c28) || DEF_WILL_FIRE_RL_action_l76c45) || DEF_WILL_FIRE_RL_action_l77c33) || DEF_WILL_FIRE_RL_action_l80c24) || DEF_WILL_FIRE_RL_action_l81c38))
      dollar_error(sim_hdl, this, "s", &__str_literal_4);
}

void MOD_mkTestbench::__me_check_6()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l71c9 && (((((DEF_WILL_FIRE_RL_action_l73c15 || DEF_WILL_FIRE_RL_action_l75c28) || DEF_WILL_FIRE_RL_action_l76c45) || DEF_WILL_FIRE_RL_action_l77c33) || DEF_WILL_FIRE_RL_action_l80c24) || DEF_WILL_FIRE_RL_action_l81c38))
      dollar_error(sim_hdl, this, "s", &__str_literal_5);
}

void MOD_mkTestbench::__me_check_7()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l73c15 && ((((DEF_WILL_FIRE_RL_action_l75c28 || DEF_WILL_FIRE_RL_action_l76c45) || DEF_WILL_FIRE_RL_action_l77c33) || DEF_WILL_FIRE_RL_action_l80c24) || DEF_WILL_FIRE_RL_action_l81c38))
      dollar_error(sim_hdl, this, "s", &__str_literal_6);
}

void MOD_mkTestbench::__me_check_8()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l75c28 && (((DEF_WILL_FIRE_RL_action_l76c45 || DEF_WILL_FIRE_RL_action_l77c33) || DEF_WILL_FIRE_RL_action_l80c24) || DEF_WILL_FIRE_RL_action_l81c38))
      dollar_error(sim_hdl, this, "s", &__str_literal_7);
}

void MOD_mkTestbench::__me_check_9()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l76c45 && ((DEF_WILL_FIRE_RL_action_l77c33 || DEF_WILL_FIRE_RL_action_l80c24) || DEF_WILL_FIRE_RL_action_l81c38))
      dollar_error(sim_hdl, this, "s", &__str_literal_8);
}

void MOD_mkTestbench::__me_check_10()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l77c33 && (DEF_WILL_FIRE_RL_action_l80c24 || DEF_WILL_FIRE_RL_action_l81c38))
      dollar_error(sim_hdl, this, "s", &__str_literal_9);
}

void MOD_mkTestbench::__me_check_11()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l80c24 && DEF_WILL_FIRE_RL_action_l81c38)
      dollar_error(sim_hdl, this, "s", &__str_literal_10);
}


/* Methods */


/* Reset routines */

void MOD_mkTestbench::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_update.reset_RST(ARG_rst_in);
  INST_state_mkFSMstate.reset_RST(ARG_rst_in);
  INST_state_fired.reset_RST(ARG_rst_in);
  INST_state_can_overlap.reset_RST(ARG_rst_in);
  INST_start_reg_1.reset_RST(ARG_rst_in);
  INST_start_reg.reset_RST(ARG_rst_in);
  INST_running.reset_RST(ARG_rst_in);
  INST_prediction.reset_RST(ARG_rst_in);
  INST_message.reset_RST(ARG_rst_in);
  INST_debug.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTestbench::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTestbench::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_abort.dump_state(indent + 2u);
  INST_debug.dump_state(indent + 2u);
  INST_message.dump_state(indent + 2u);
  INST_prediction.dump_state(indent + 2u);
  INST_running.dump_state(indent + 2u);
  INST_start_reg.dump_state(indent + 2u);
  INST_start_reg_1.dump_state(indent + 2u);
  INST_start_reg_2.dump_state(indent + 2u);
  INST_start_wire.dump_state(indent + 2u);
  INST_state_can_overlap.dump_state(indent + 2u);
  INST_state_fired.dump_state(indent + 2u);
  INST_state_fired_1.dump_state(indent + 2u);
  INST_state_mkFSMstate.dump_state(indent + 2u);
  INST_state_overlap_pw.dump_state(indent + 2u);
  INST_state_set_pw.dump_state(indent + 2u);
  INST_update.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTestbench::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 73u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_action_l70c29", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_action_l71c9", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_action_l73c15", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_action_l75c28", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_action_l76c45", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_action_l77c33", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_action_l80c24", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_action_l81c38", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_auto_finish", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_auto_start", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_fsm_start", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_restart", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_start_reg__dreg_update", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_state_every", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_state_fired__dreg_update", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_state_handle_abort", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE___me_check_10", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE___me_check_11", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE___me_check_5", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE___me_check_6", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE___me_check_7", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE___me_check_8", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE___me_check_9", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "IF_TASK_recieve_7_BITS_1_TO_0_8_EQ_1_9_THEN_TA_ETC___d67", 144u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "TASK_recieve_7_BITS_129_TO_66_2_CONCAT_TASK_re_ETC___d64", 72u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "TASK_recieve_7_BITS_145_TO_2___d60", 144u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "TASK_recieve_7_BITS_1_TO_0_8_EQ_1_9_CONCAT_IF__ETC___d68", 145u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "TASK_recieve_7_BITS_65_TO_2_1_CONCAT_TASK_reci_ETC___d66", 144u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "TASK_recieve___d57", 160u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "TASK_testplusargs___d37", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l70c29", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l71c9", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l73c15", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l75c28", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l76c45", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l77c33", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l80c24", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l81c38", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_auto_finish", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_auto_start", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_fsm_start", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_restart", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_start_reg__dreg_update", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_state_every", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_state_fired__dreg_update", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_state_handle_abort", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE___me_check_10", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE___me_check_11", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE___me_check_5", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE___me_check_6", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE___me_check_7", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE___me_check_8", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE___me_check_9", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "message_1_BITS_143_TO_0___d88", 144u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "message___d41", 145u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "update___d90", 144u);
  num = INST_abort.dump_VCD_defs(num);
  num = INST_debug.dump_VCD_defs(num);
  num = INST_message.dump_VCD_defs(num);
  num = INST_prediction.dump_VCD_defs(num);
  num = INST_running.dump_VCD_defs(num);
  num = INST_start_reg.dump_VCD_defs(num);
  num = INST_start_reg_1.dump_VCD_defs(num);
  num = INST_start_reg_2.dump_VCD_defs(num);
  num = INST_start_wire.dump_VCD_defs(num);
  num = INST_state_can_overlap.dump_VCD_defs(num);
  num = INST_state_fired.dump_VCD_defs(num);
  num = INST_state_fired_1.dump_VCD_defs(num);
  num = INST_state_mkFSMstate.dump_VCD_defs(num);
  num = INST_state_overlap_pw.dump_VCD_defs(num);
  num = INST_state_set_pw.dump_VCD_defs(num);
  num = INST_update.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTestbench::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTestbench &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkTestbench::vcd_defs(tVCDDumpType dt, MOD_mkTestbench &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 144u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 72u);
    vcd_write_x(sim_hdl, num++, 144u);
    vcd_write_x(sim_hdl, num++, 145u);
    vcd_write_x(sim_hdl, num++, 144u);
    vcd_write_x(sim_hdl, num++, 160u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 144u);
    vcd_write_x(sim_hdl, num++, 145u);
    vcd_write_x(sim_hdl, num++, 144u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_CAN_FIRE_RL_action_l70c29) != DEF_CAN_FIRE_RL_action_l70c29)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_action_l70c29, 1u);
	backing.DEF_CAN_FIRE_RL_action_l70c29 = DEF_CAN_FIRE_RL_action_l70c29;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_action_l71c9) != DEF_CAN_FIRE_RL_action_l71c9)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_action_l71c9, 1u);
	backing.DEF_CAN_FIRE_RL_action_l71c9 = DEF_CAN_FIRE_RL_action_l71c9;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_action_l73c15) != DEF_CAN_FIRE_RL_action_l73c15)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_action_l73c15, 1u);
	backing.DEF_CAN_FIRE_RL_action_l73c15 = DEF_CAN_FIRE_RL_action_l73c15;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_action_l75c28) != DEF_CAN_FIRE_RL_action_l75c28)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_action_l75c28, 1u);
	backing.DEF_CAN_FIRE_RL_action_l75c28 = DEF_CAN_FIRE_RL_action_l75c28;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_action_l76c45) != DEF_CAN_FIRE_RL_action_l76c45)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_action_l76c45, 1u);
	backing.DEF_CAN_FIRE_RL_action_l76c45 = DEF_CAN_FIRE_RL_action_l76c45;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_action_l77c33) != DEF_CAN_FIRE_RL_action_l77c33)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_action_l77c33, 1u);
	backing.DEF_CAN_FIRE_RL_action_l77c33 = DEF_CAN_FIRE_RL_action_l77c33;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_action_l80c24) != DEF_CAN_FIRE_RL_action_l80c24)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_action_l80c24, 1u);
	backing.DEF_CAN_FIRE_RL_action_l80c24 = DEF_CAN_FIRE_RL_action_l80c24;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_action_l81c38) != DEF_CAN_FIRE_RL_action_l81c38)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_action_l81c38, 1u);
	backing.DEF_CAN_FIRE_RL_action_l81c38 = DEF_CAN_FIRE_RL_action_l81c38;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_auto_finish) != DEF_CAN_FIRE_RL_auto_finish)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_auto_finish, 1u);
	backing.DEF_CAN_FIRE_RL_auto_finish = DEF_CAN_FIRE_RL_auto_finish;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_auto_start) != DEF_CAN_FIRE_RL_auto_start)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_auto_start, 1u);
	backing.DEF_CAN_FIRE_RL_auto_start = DEF_CAN_FIRE_RL_auto_start;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_fsm_start) != DEF_CAN_FIRE_RL_fsm_start)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_fsm_start, 1u);
	backing.DEF_CAN_FIRE_RL_fsm_start = DEF_CAN_FIRE_RL_fsm_start;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_restart) != DEF_CAN_FIRE_RL_restart)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_restart, 1u);
	backing.DEF_CAN_FIRE_RL_restart = DEF_CAN_FIRE_RL_restart;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_start_reg__dreg_update) != DEF_CAN_FIRE_RL_start_reg__dreg_update)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_start_reg__dreg_update, 1u);
	backing.DEF_CAN_FIRE_RL_start_reg__dreg_update = DEF_CAN_FIRE_RL_start_reg__dreg_update;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_state_every) != DEF_CAN_FIRE_RL_state_every)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_state_every, 1u);
	backing.DEF_CAN_FIRE_RL_state_every = DEF_CAN_FIRE_RL_state_every;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_state_fired__dreg_update) != DEF_CAN_FIRE_RL_state_fired__dreg_update)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_state_fired__dreg_update, 1u);
	backing.DEF_CAN_FIRE_RL_state_fired__dreg_update = DEF_CAN_FIRE_RL_state_fired__dreg_update;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_state_handle_abort) != DEF_CAN_FIRE_RL_state_handle_abort)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_state_handle_abort, 1u);
	backing.DEF_CAN_FIRE_RL_state_handle_abort = DEF_CAN_FIRE_RL_state_handle_abort;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE___me_check_10) != DEF_CAN_FIRE___me_check_10)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE___me_check_10, 1u);
	backing.DEF_CAN_FIRE___me_check_10 = DEF_CAN_FIRE___me_check_10;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE___me_check_11) != DEF_CAN_FIRE___me_check_11)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE___me_check_11, 1u);
	backing.DEF_CAN_FIRE___me_check_11 = DEF_CAN_FIRE___me_check_11;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE___me_check_5) != DEF_CAN_FIRE___me_check_5)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE___me_check_5, 1u);
	backing.DEF_CAN_FIRE___me_check_5 = DEF_CAN_FIRE___me_check_5;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE___me_check_6) != DEF_CAN_FIRE___me_check_6)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE___me_check_6, 1u);
	backing.DEF_CAN_FIRE___me_check_6 = DEF_CAN_FIRE___me_check_6;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE___me_check_7) != DEF_CAN_FIRE___me_check_7)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE___me_check_7, 1u);
	backing.DEF_CAN_FIRE___me_check_7 = DEF_CAN_FIRE___me_check_7;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE___me_check_8) != DEF_CAN_FIRE___me_check_8)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE___me_check_8, 1u);
	backing.DEF_CAN_FIRE___me_check_8 = DEF_CAN_FIRE___me_check_8;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE___me_check_9) != DEF_CAN_FIRE___me_check_9)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE___me_check_9, 1u);
	backing.DEF_CAN_FIRE___me_check_9 = DEF_CAN_FIRE___me_check_9;
      }
      ++num;
      if ((backing.DEF_IF_TASK_recieve_7_BITS_1_TO_0_8_EQ_1_9_THEN_TA_ETC___d67) != DEF_IF_TASK_recieve_7_BITS_1_TO_0_8_EQ_1_9_THEN_TA_ETC___d67)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_TASK_recieve_7_BITS_1_TO_0_8_EQ_1_9_THEN_TA_ETC___d67, 144u);
	backing.DEF_IF_TASK_recieve_7_BITS_1_TO_0_8_EQ_1_9_THEN_TA_ETC___d67 = DEF_IF_TASK_recieve_7_BITS_1_TO_0_8_EQ_1_9_THEN_TA_ETC___d67;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_TASK_recieve_7_BITS_129_TO_66_2_CONCAT_TASK_re_ETC___d64) != DEF_TASK_recieve_7_BITS_129_TO_66_2_CONCAT_TASK_re_ETC___d64)
      {
	vcd_write_val(sim_hdl, num, DEF_TASK_recieve_7_BITS_129_TO_66_2_CONCAT_TASK_re_ETC___d64, 72u);
	backing.DEF_TASK_recieve_7_BITS_129_TO_66_2_CONCAT_TASK_re_ETC___d64 = DEF_TASK_recieve_7_BITS_129_TO_66_2_CONCAT_TASK_re_ETC___d64;
      }
      ++num;
      if ((backing.DEF_TASK_recieve_7_BITS_145_TO_2___d60) != DEF_TASK_recieve_7_BITS_145_TO_2___d60)
      {
	vcd_write_val(sim_hdl, num, DEF_TASK_recieve_7_BITS_145_TO_2___d60, 144u);
	backing.DEF_TASK_recieve_7_BITS_145_TO_2___d60 = DEF_TASK_recieve_7_BITS_145_TO_2___d60;
      }
      ++num;
      if ((backing.DEF_TASK_recieve_7_BITS_1_TO_0_8_EQ_1_9_CONCAT_IF__ETC___d68) != DEF_TASK_recieve_7_BITS_1_TO_0_8_EQ_1_9_CONCAT_IF__ETC___d68)
      {
	vcd_write_val(sim_hdl, num, DEF_TASK_recieve_7_BITS_1_TO_0_8_EQ_1_9_CONCAT_IF__ETC___d68, 145u);
	backing.DEF_TASK_recieve_7_BITS_1_TO_0_8_EQ_1_9_CONCAT_IF__ETC___d68 = DEF_TASK_recieve_7_BITS_1_TO_0_8_EQ_1_9_CONCAT_IF__ETC___d68;
      }
      ++num;
      if ((backing.DEF_TASK_recieve_7_BITS_65_TO_2_1_CONCAT_TASK_reci_ETC___d66) != DEF_TASK_recieve_7_BITS_65_TO_2_1_CONCAT_TASK_reci_ETC___d66)
      {
	vcd_write_val(sim_hdl, num, DEF_TASK_recieve_7_BITS_65_TO_2_1_CONCAT_TASK_reci_ETC___d66, 144u);
	backing.DEF_TASK_recieve_7_BITS_65_TO_2_1_CONCAT_TASK_reci_ETC___d66 = DEF_TASK_recieve_7_BITS_65_TO_2_1_CONCAT_TASK_reci_ETC___d66;
      }
      ++num;
      if ((backing.DEF_TASK_recieve___d57) != DEF_TASK_recieve___d57)
      {
	vcd_write_val(sim_hdl, num, DEF_TASK_recieve___d57, 160u);
	backing.DEF_TASK_recieve___d57 = DEF_TASK_recieve___d57;
      }
      ++num;
      if ((backing.DEF_TASK_testplusargs___d37) != DEF_TASK_testplusargs___d37)
      {
	vcd_write_val(sim_hdl, num, DEF_TASK_testplusargs___d37, 1u);
	backing.DEF_TASK_testplusargs___d37 = DEF_TASK_testplusargs___d37;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l70c29) != DEF_WILL_FIRE_RL_action_l70c29)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l70c29, 1u);
	backing.DEF_WILL_FIRE_RL_action_l70c29 = DEF_WILL_FIRE_RL_action_l70c29;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l71c9) != DEF_WILL_FIRE_RL_action_l71c9)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l71c9, 1u);
	backing.DEF_WILL_FIRE_RL_action_l71c9 = DEF_WILL_FIRE_RL_action_l71c9;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l73c15) != DEF_WILL_FIRE_RL_action_l73c15)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l73c15, 1u);
	backing.DEF_WILL_FIRE_RL_action_l73c15 = DEF_WILL_FIRE_RL_action_l73c15;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l75c28) != DEF_WILL_FIRE_RL_action_l75c28)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l75c28, 1u);
	backing.DEF_WILL_FIRE_RL_action_l75c28 = DEF_WILL_FIRE_RL_action_l75c28;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l76c45) != DEF_WILL_FIRE_RL_action_l76c45)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l76c45, 1u);
	backing.DEF_WILL_FIRE_RL_action_l76c45 = DEF_WILL_FIRE_RL_action_l76c45;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l77c33) != DEF_WILL_FIRE_RL_action_l77c33)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l77c33, 1u);
	backing.DEF_WILL_FIRE_RL_action_l77c33 = DEF_WILL_FIRE_RL_action_l77c33;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l80c24) != DEF_WILL_FIRE_RL_action_l80c24)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l80c24, 1u);
	backing.DEF_WILL_FIRE_RL_action_l80c24 = DEF_WILL_FIRE_RL_action_l80c24;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l81c38) != DEF_WILL_FIRE_RL_action_l81c38)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l81c38, 1u);
	backing.DEF_WILL_FIRE_RL_action_l81c38 = DEF_WILL_FIRE_RL_action_l81c38;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_auto_finish) != DEF_WILL_FIRE_RL_auto_finish)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_auto_finish, 1u);
	backing.DEF_WILL_FIRE_RL_auto_finish = DEF_WILL_FIRE_RL_auto_finish;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_auto_start) != DEF_WILL_FIRE_RL_auto_start)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_auto_start, 1u);
	backing.DEF_WILL_FIRE_RL_auto_start = DEF_WILL_FIRE_RL_auto_start;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_fsm_start) != DEF_WILL_FIRE_RL_fsm_start)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_fsm_start, 1u);
	backing.DEF_WILL_FIRE_RL_fsm_start = DEF_WILL_FIRE_RL_fsm_start;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_restart) != DEF_WILL_FIRE_RL_restart)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_restart, 1u);
	backing.DEF_WILL_FIRE_RL_restart = DEF_WILL_FIRE_RL_restart;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_start_reg__dreg_update) != DEF_WILL_FIRE_RL_start_reg__dreg_update)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_start_reg__dreg_update, 1u);
	backing.DEF_WILL_FIRE_RL_start_reg__dreg_update = DEF_WILL_FIRE_RL_start_reg__dreg_update;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_state_every) != DEF_WILL_FIRE_RL_state_every)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_state_every, 1u);
	backing.DEF_WILL_FIRE_RL_state_every = DEF_WILL_FIRE_RL_state_every;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_state_fired__dreg_update) != DEF_WILL_FIRE_RL_state_fired__dreg_update)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_state_fired__dreg_update, 1u);
	backing.DEF_WILL_FIRE_RL_state_fired__dreg_update = DEF_WILL_FIRE_RL_state_fired__dreg_update;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_state_handle_abort) != DEF_WILL_FIRE_RL_state_handle_abort)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_state_handle_abort, 1u);
	backing.DEF_WILL_FIRE_RL_state_handle_abort = DEF_WILL_FIRE_RL_state_handle_abort;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE___me_check_10) != DEF_WILL_FIRE___me_check_10)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE___me_check_10, 1u);
	backing.DEF_WILL_FIRE___me_check_10 = DEF_WILL_FIRE___me_check_10;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE___me_check_11) != DEF_WILL_FIRE___me_check_11)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE___me_check_11, 1u);
	backing.DEF_WILL_FIRE___me_check_11 = DEF_WILL_FIRE___me_check_11;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE___me_check_5) != DEF_WILL_FIRE___me_check_5)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE___me_check_5, 1u);
	backing.DEF_WILL_FIRE___me_check_5 = DEF_WILL_FIRE___me_check_5;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE___me_check_6) != DEF_WILL_FIRE___me_check_6)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE___me_check_6, 1u);
	backing.DEF_WILL_FIRE___me_check_6 = DEF_WILL_FIRE___me_check_6;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE___me_check_7) != DEF_WILL_FIRE___me_check_7)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE___me_check_7, 1u);
	backing.DEF_WILL_FIRE___me_check_7 = DEF_WILL_FIRE___me_check_7;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE___me_check_8) != DEF_WILL_FIRE___me_check_8)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE___me_check_8, 1u);
	backing.DEF_WILL_FIRE___me_check_8 = DEF_WILL_FIRE___me_check_8;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE___me_check_9) != DEF_WILL_FIRE___me_check_9)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE___me_check_9, 1u);
	backing.DEF_WILL_FIRE___me_check_9 = DEF_WILL_FIRE___me_check_9;
      }
      ++num;
      if ((backing.DEF_message_1_BITS_143_TO_0___d88) != DEF_message_1_BITS_143_TO_0___d88)
      {
	vcd_write_val(sim_hdl, num, DEF_message_1_BITS_143_TO_0___d88, 144u);
	backing.DEF_message_1_BITS_143_TO_0___d88 = DEF_message_1_BITS_143_TO_0___d88;
      }
      ++num;
      if ((backing.DEF_message___d41) != DEF_message___d41)
      {
	vcd_write_val(sim_hdl, num, DEF_message___d41, 145u);
	backing.DEF_message___d41 = DEF_message___d41;
      }
      ++num;
      if ((backing.DEF_update___d90) != DEF_update___d90)
      {
	vcd_write_val(sim_hdl, num, DEF_update___d90, 144u);
	backing.DEF_update___d90 = DEF_update___d90;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_action_l70c29, 1u);
      backing.DEF_CAN_FIRE_RL_action_l70c29 = DEF_CAN_FIRE_RL_action_l70c29;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_action_l71c9, 1u);
      backing.DEF_CAN_FIRE_RL_action_l71c9 = DEF_CAN_FIRE_RL_action_l71c9;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_action_l73c15, 1u);
      backing.DEF_CAN_FIRE_RL_action_l73c15 = DEF_CAN_FIRE_RL_action_l73c15;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_action_l75c28, 1u);
      backing.DEF_CAN_FIRE_RL_action_l75c28 = DEF_CAN_FIRE_RL_action_l75c28;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_action_l76c45, 1u);
      backing.DEF_CAN_FIRE_RL_action_l76c45 = DEF_CAN_FIRE_RL_action_l76c45;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_action_l77c33, 1u);
      backing.DEF_CAN_FIRE_RL_action_l77c33 = DEF_CAN_FIRE_RL_action_l77c33;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_action_l80c24, 1u);
      backing.DEF_CAN_FIRE_RL_action_l80c24 = DEF_CAN_FIRE_RL_action_l80c24;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_action_l81c38, 1u);
      backing.DEF_CAN_FIRE_RL_action_l81c38 = DEF_CAN_FIRE_RL_action_l81c38;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_auto_finish, 1u);
      backing.DEF_CAN_FIRE_RL_auto_finish = DEF_CAN_FIRE_RL_auto_finish;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_auto_start, 1u);
      backing.DEF_CAN_FIRE_RL_auto_start = DEF_CAN_FIRE_RL_auto_start;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_fsm_start, 1u);
      backing.DEF_CAN_FIRE_RL_fsm_start = DEF_CAN_FIRE_RL_fsm_start;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_restart, 1u);
      backing.DEF_CAN_FIRE_RL_restart = DEF_CAN_FIRE_RL_restart;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_start_reg__dreg_update, 1u);
      backing.DEF_CAN_FIRE_RL_start_reg__dreg_update = DEF_CAN_FIRE_RL_start_reg__dreg_update;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_state_every, 1u);
      backing.DEF_CAN_FIRE_RL_state_every = DEF_CAN_FIRE_RL_state_every;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_state_fired__dreg_update, 1u);
      backing.DEF_CAN_FIRE_RL_state_fired__dreg_update = DEF_CAN_FIRE_RL_state_fired__dreg_update;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_state_handle_abort, 1u);
      backing.DEF_CAN_FIRE_RL_state_handle_abort = DEF_CAN_FIRE_RL_state_handle_abort;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE___me_check_10, 1u);
      backing.DEF_CAN_FIRE___me_check_10 = DEF_CAN_FIRE___me_check_10;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE___me_check_11, 1u);
      backing.DEF_CAN_FIRE___me_check_11 = DEF_CAN_FIRE___me_check_11;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE___me_check_5, 1u);
      backing.DEF_CAN_FIRE___me_check_5 = DEF_CAN_FIRE___me_check_5;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE___me_check_6, 1u);
      backing.DEF_CAN_FIRE___me_check_6 = DEF_CAN_FIRE___me_check_6;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE___me_check_7, 1u);
      backing.DEF_CAN_FIRE___me_check_7 = DEF_CAN_FIRE___me_check_7;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE___me_check_8, 1u);
      backing.DEF_CAN_FIRE___me_check_8 = DEF_CAN_FIRE___me_check_8;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE___me_check_9, 1u);
      backing.DEF_CAN_FIRE___me_check_9 = DEF_CAN_FIRE___me_check_9;
      vcd_write_val(sim_hdl, num++, DEF_IF_TASK_recieve_7_BITS_1_TO_0_8_EQ_1_9_THEN_TA_ETC___d67, 144u);
      backing.DEF_IF_TASK_recieve_7_BITS_1_TO_0_8_EQ_1_9_THEN_TA_ETC___d67 = DEF_IF_TASK_recieve_7_BITS_1_TO_0_8_EQ_1_9_THEN_TA_ETC___d67;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_TASK_recieve_7_BITS_129_TO_66_2_CONCAT_TASK_re_ETC___d64, 72u);
      backing.DEF_TASK_recieve_7_BITS_129_TO_66_2_CONCAT_TASK_re_ETC___d64 = DEF_TASK_recieve_7_BITS_129_TO_66_2_CONCAT_TASK_re_ETC___d64;
      vcd_write_val(sim_hdl, num++, DEF_TASK_recieve_7_BITS_145_TO_2___d60, 144u);
      backing.DEF_TASK_recieve_7_BITS_145_TO_2___d60 = DEF_TASK_recieve_7_BITS_145_TO_2___d60;
      vcd_write_val(sim_hdl, num++, DEF_TASK_recieve_7_BITS_1_TO_0_8_EQ_1_9_CONCAT_IF__ETC___d68, 145u);
      backing.DEF_TASK_recieve_7_BITS_1_TO_0_8_EQ_1_9_CONCAT_IF__ETC___d68 = DEF_TASK_recieve_7_BITS_1_TO_0_8_EQ_1_9_CONCAT_IF__ETC___d68;
      vcd_write_val(sim_hdl, num++, DEF_TASK_recieve_7_BITS_65_TO_2_1_CONCAT_TASK_reci_ETC___d66, 144u);
      backing.DEF_TASK_recieve_7_BITS_65_TO_2_1_CONCAT_TASK_reci_ETC___d66 = DEF_TASK_recieve_7_BITS_65_TO_2_1_CONCAT_TASK_reci_ETC___d66;
      vcd_write_val(sim_hdl, num++, DEF_TASK_recieve___d57, 160u);
      backing.DEF_TASK_recieve___d57 = DEF_TASK_recieve___d57;
      vcd_write_val(sim_hdl, num++, DEF_TASK_testplusargs___d37, 1u);
      backing.DEF_TASK_testplusargs___d37 = DEF_TASK_testplusargs___d37;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l70c29, 1u);
      backing.DEF_WILL_FIRE_RL_action_l70c29 = DEF_WILL_FIRE_RL_action_l70c29;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l71c9, 1u);
      backing.DEF_WILL_FIRE_RL_action_l71c9 = DEF_WILL_FIRE_RL_action_l71c9;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l73c15, 1u);
      backing.DEF_WILL_FIRE_RL_action_l73c15 = DEF_WILL_FIRE_RL_action_l73c15;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l75c28, 1u);
      backing.DEF_WILL_FIRE_RL_action_l75c28 = DEF_WILL_FIRE_RL_action_l75c28;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l76c45, 1u);
      backing.DEF_WILL_FIRE_RL_action_l76c45 = DEF_WILL_FIRE_RL_action_l76c45;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l77c33, 1u);
      backing.DEF_WILL_FIRE_RL_action_l77c33 = DEF_WILL_FIRE_RL_action_l77c33;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l80c24, 1u);
      backing.DEF_WILL_FIRE_RL_action_l80c24 = DEF_WILL_FIRE_RL_action_l80c24;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l81c38, 1u);
      backing.DEF_WILL_FIRE_RL_action_l81c38 = DEF_WILL_FIRE_RL_action_l81c38;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_auto_finish, 1u);
      backing.DEF_WILL_FIRE_RL_auto_finish = DEF_WILL_FIRE_RL_auto_finish;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_auto_start, 1u);
      backing.DEF_WILL_FIRE_RL_auto_start = DEF_WILL_FIRE_RL_auto_start;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_fsm_start, 1u);
      backing.DEF_WILL_FIRE_RL_fsm_start = DEF_WILL_FIRE_RL_fsm_start;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_restart, 1u);
      backing.DEF_WILL_FIRE_RL_restart = DEF_WILL_FIRE_RL_restart;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_start_reg__dreg_update, 1u);
      backing.DEF_WILL_FIRE_RL_start_reg__dreg_update = DEF_WILL_FIRE_RL_start_reg__dreg_update;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_state_every, 1u);
      backing.DEF_WILL_FIRE_RL_state_every = DEF_WILL_FIRE_RL_state_every;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_state_fired__dreg_update, 1u);
      backing.DEF_WILL_FIRE_RL_state_fired__dreg_update = DEF_WILL_FIRE_RL_state_fired__dreg_update;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_state_handle_abort, 1u);
      backing.DEF_WILL_FIRE_RL_state_handle_abort = DEF_WILL_FIRE_RL_state_handle_abort;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE___me_check_10, 1u);
      backing.DEF_WILL_FIRE___me_check_10 = DEF_WILL_FIRE___me_check_10;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE___me_check_11, 1u);
      backing.DEF_WILL_FIRE___me_check_11 = DEF_WILL_FIRE___me_check_11;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE___me_check_5, 1u);
      backing.DEF_WILL_FIRE___me_check_5 = DEF_WILL_FIRE___me_check_5;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE___me_check_6, 1u);
      backing.DEF_WILL_FIRE___me_check_6 = DEF_WILL_FIRE___me_check_6;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE___me_check_7, 1u);
      backing.DEF_WILL_FIRE___me_check_7 = DEF_WILL_FIRE___me_check_7;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE___me_check_8, 1u);
      backing.DEF_WILL_FIRE___me_check_8 = DEF_WILL_FIRE___me_check_8;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE___me_check_9, 1u);
      backing.DEF_WILL_FIRE___me_check_9 = DEF_WILL_FIRE___me_check_9;
      vcd_write_val(sim_hdl, num++, DEF_message_1_BITS_143_TO_0___d88, 144u);
      backing.DEF_message_1_BITS_143_TO_0___d88 = DEF_message_1_BITS_143_TO_0___d88;
      vcd_write_val(sim_hdl, num++, DEF_message___d41, 145u);
      backing.DEF_message___d41 = DEF_message___d41;
      vcd_write_val(sim_hdl, num++, DEF_update___d90, 144u);
      backing.DEF_update___d90 = DEF_update___d90;
    }
}

void MOD_mkTestbench::vcd_prims(tVCDDumpType dt, MOD_mkTestbench &backing)
{
  INST_abort.dump_VCD(dt, backing.INST_abort);
  INST_debug.dump_VCD(dt, backing.INST_debug);
  INST_message.dump_VCD(dt, backing.INST_message);
  INST_prediction.dump_VCD(dt, backing.INST_prediction);
  INST_running.dump_VCD(dt, backing.INST_running);
  INST_start_reg.dump_VCD(dt, backing.INST_start_reg);
  INST_start_reg_1.dump_VCD(dt, backing.INST_start_reg_1);
  INST_start_reg_2.dump_VCD(dt, backing.INST_start_reg_2);
  INST_start_wire.dump_VCD(dt, backing.INST_start_wire);
  INST_state_can_overlap.dump_VCD(dt, backing.INST_state_can_overlap);
  INST_state_fired.dump_VCD(dt, backing.INST_state_fired);
  INST_state_fired_1.dump_VCD(dt, backing.INST_state_fired_1);
  INST_state_mkFSMstate.dump_VCD(dt, backing.INST_state_mkFSMstate);
  INST_state_overlap_pw.dump_VCD(dt, backing.INST_state_overlap_pw);
  INST_state_set_pw.dump_VCD(dt, backing.INST_state_set_pw);
  INST_update.dump_VCD(dt, backing.INST_update);
}
