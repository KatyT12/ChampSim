/*
 * Generated by Bluespec Compiler, version 2024.01 (build ae2a2fc6)
 * 
 * On Tue Oct 15 18:36:35 BST 2024
 * 
 */
#include "bluesim_primitives.h"
#include "mkTourGHistReg.h"


/* Constructor */
MOD_mkTourGHistReg::MOD_mkTourGHistReg(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_m_addHist(simHdl, "m_addHist", this, 2u, (tUInt8)0u),
    INST_m_hist(simHdl, "m_hist", this, 12u, 0u, (tUInt8)0u),
    INST_m_redirectHist(simHdl, "m_redirectHist", this, 12u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  PORT_EN_addHistory = false;
  PORT_EN_redirect = false;
  PORT_addHistory_taken = false;
  PORT_addHistory_num = false;
  PORT_redirect_newHist = 0u;
  PORT_history = 0u;
  PORT_RDY_history = false;
  PORT_RDY_addHistory = false;
  PORT_RDY_redirect = false;
  symbol_count = 23u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTourGHistReg::init_symbols_0()
{
  init_symbol(&symbols[0u], "addHistory_num", SYM_PORT, &PORT_addHistory_num, 1u);
  init_symbol(&symbols[1u], "addHistory_taken", SYM_PORT, &PORT_addHistory_taken, 1u);
  init_symbol(&symbols[2u], "CAN_FIRE_addHistory", SYM_DEF, &DEF_CAN_FIRE_addHistory, 1u);
  init_symbol(&symbols[3u], "CAN_FIRE_history", SYM_DEF, &DEF_CAN_FIRE_history, 1u);
  init_symbol(&symbols[4u],
	      "CAN_FIRE_RL_m_canon_addHistory",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_m_canon_addHistory,
	      1u);
  init_symbol(&symbols[5u],
	      "CAN_FIRE_RL_m_canon_redirect",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_m_canon_redirect,
	      1u);
  init_symbol(&symbols[6u], "CAN_FIRE_redirect", SYM_DEF, &DEF_CAN_FIRE_redirect, 1u);
  init_symbol(&symbols[7u], "EN_addHistory", SYM_PORT, &PORT_EN_addHistory, 1u);
  init_symbol(&symbols[8u], "EN_redirect", SYM_PORT, &PORT_EN_redirect, 1u);
  init_symbol(&symbols[9u], "history", SYM_PORT, &PORT_history, 12u);
  init_symbol(&symbols[10u], "m_addHist", SYM_MODULE, &INST_m_addHist);
  init_symbol(&symbols[11u], "m_hist", SYM_MODULE, &INST_m_hist);
  init_symbol(&symbols[12u], "m_redirectHist", SYM_MODULE, &INST_m_redirectHist);
  init_symbol(&symbols[13u], "RDY_addHistory", SYM_PORT, &PORT_RDY_addHistory, 1u);
  init_symbol(&symbols[14u], "RDY_history", SYM_PORT, &PORT_RDY_history, 1u);
  init_symbol(&symbols[15u], "RDY_redirect", SYM_PORT, &PORT_RDY_redirect, 1u);
  init_symbol(&symbols[16u], "RL_m_canon_addHistory", SYM_RULE);
  init_symbol(&symbols[17u], "RL_m_canon_redirect", SYM_RULE);
  init_symbol(&symbols[18u], "redirect_newHist", SYM_PORT, &PORT_redirect_newHist, 12u);
  init_symbol(&symbols[19u], "WILL_FIRE_addHistory", SYM_DEF, &DEF_WILL_FIRE_addHistory, 1u);
  init_symbol(&symbols[20u],
	      "WILL_FIRE_RL_m_canon_addHistory",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_m_canon_addHistory,
	      1u);
  init_symbol(&symbols[21u],
	      "WILL_FIRE_RL_m_canon_redirect",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_m_canon_redirect,
	      1u);
  init_symbol(&symbols[22u], "WILL_FIRE_redirect", SYM_DEF, &DEF_WILL_FIRE_redirect, 1u);
}


/* Rule actions */

void MOD_mkTourGHistReg::RL_m_canon_redirect()
{
  tUInt32 DEF_x__h209;
  tUInt32 DEF_x_wget__h164;
  DEF_x_wget__h164 = INST_m_redirectHist.METH_wget();
  DEF_x__h209 = DEF_x_wget__h164;
  INST_m_hist.METH_write(DEF_x__h209);
}

void MOD_mkTourGHistReg::RL_m_canon_addHistory()
{
  tUInt8 DEF_x__h368;
  tUInt8 DEF_x_wget_num__h307;
  tUInt8 DEF_x_wget_taken__h306;
  tUInt32 DEF_x__h277;
  tUInt32 DEF_x__h270;
  tUInt8 DEF_m_addHist_wget____d7;
  DEF__read__h52 = INST_m_hist.METH_read();
  DEF_m_addHist_wget____d7 = INST_m_addHist.METH_wget();
  DEF_x_wget_taken__h306 = (tUInt8)(DEF_m_addHist_wget____d7 >> 1u);
  DEF_x_wget_num__h307 = (tUInt8)((tUInt8)1u & DEF_m_addHist_wget____d7);
  DEF_x__h368 = DEF_x_wget_num__h307;
  DEF_x__h277 = primShiftR32(13u,
			     13u,
			     (tUInt32)(8191u & ((((tUInt32)(DEF_x_wget_taken__h306)) << 12u) | DEF__read__h52)),
			     1u,
			     (tUInt8)(DEF_x__h368));
  DEF_x__h270 = (tUInt32)(4095u & DEF_x__h277);
  INST_m_hist.METH_write(DEF_x__h270);
}


/* Methods */

tUInt32 MOD_mkTourGHistReg::METH_history()
{
  DEF__read__h52 = INST_m_hist.METH_read();
  PORT_history = DEF__read__h52;
  return PORT_history;
}

tUInt8 MOD_mkTourGHistReg::METH_RDY_history()
{
  DEF_CAN_FIRE_history = (tUInt8)1u;
  PORT_RDY_history = DEF_CAN_FIRE_history;
  return PORT_RDY_history;
}

void MOD_mkTourGHistReg::METH_addHistory(tUInt8 ARG_addHistory_taken, tUInt8 ARG_addHistory_num)
{
  tUInt8 DEF_addHistory_taken_CONCAT_addHistory_num___d15;
  PORT_EN_addHistory = (tUInt8)1u;
  DEF_WILL_FIRE_addHistory = (tUInt8)1u;
  PORT_addHistory_taken = ARG_addHistory_taken;
  PORT_addHistory_num = ARG_addHistory_num;
  DEF_addHistory_taken_CONCAT_addHistory_num___d15 = (tUInt8)3u & ((ARG_addHistory_taken << 1u) | ARG_addHistory_num);
  INST_m_addHist.METH_wset(DEF_addHistory_taken_CONCAT_addHistory_num___d15);
}

tUInt8 MOD_mkTourGHistReg::METH_RDY_addHistory()
{
  DEF_CAN_FIRE_addHistory = (tUInt8)1u;
  PORT_RDY_addHistory = DEF_CAN_FIRE_addHistory;
  return PORT_RDY_addHistory;
}

void MOD_mkTourGHistReg::METH_redirect(tUInt32 ARG_redirect_newHist)
{
  PORT_EN_redirect = (tUInt8)1u;
  DEF_WILL_FIRE_redirect = (tUInt8)1u;
  PORT_redirect_newHist = ARG_redirect_newHist;
  INST_m_redirectHist.METH_wset(ARG_redirect_newHist);
}

tUInt8 MOD_mkTourGHistReg::METH_RDY_redirect()
{
  DEF_CAN_FIRE_redirect = (tUInt8)1u;
  PORT_RDY_redirect = DEF_CAN_FIRE_redirect;
  return PORT_RDY_redirect;
}


/* Reset routines */

void MOD_mkTourGHistReg::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_m_hist.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTourGHistReg::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTourGHistReg::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_m_addHist.dump_state(indent + 2u);
  INST_m_hist.dump_state(indent + 2u);
  INST_m_redirectHist.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTourGHistReg::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 23u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_m_canon_addHistory", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_m_canon_redirect", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_addHistory", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_history", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_redirect", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_m_canon_addHistory", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_m_canon_redirect", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_addHistory", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_redirect", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "_read__h52", 12u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_addHistory", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_redirect", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_addHistory", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_history", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_redirect", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "addHistory_num", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "addHistory_taken", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "history", 12u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "redirect_newHist", 12u);
  num = INST_m_addHist.dump_VCD_defs(num);
  num = INST_m_hist.dump_VCD_defs(num);
  num = INST_m_redirectHist.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTourGHistReg::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTourGHistReg &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkTourGHistReg::vcd_defs(tVCDDumpType dt, MOD_mkTourGHistReg &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 12u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 12u);
    vcd_write_x(sim_hdl, num++, 12u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_CAN_FIRE_RL_m_canon_addHistory) != DEF_CAN_FIRE_RL_m_canon_addHistory)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_m_canon_addHistory, 1u);
	backing.DEF_CAN_FIRE_RL_m_canon_addHistory = DEF_CAN_FIRE_RL_m_canon_addHistory;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_m_canon_redirect) != DEF_CAN_FIRE_RL_m_canon_redirect)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_m_canon_redirect, 1u);
	backing.DEF_CAN_FIRE_RL_m_canon_redirect = DEF_CAN_FIRE_RL_m_canon_redirect;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_addHistory) != DEF_CAN_FIRE_addHistory)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_addHistory, 1u);
	backing.DEF_CAN_FIRE_addHistory = DEF_CAN_FIRE_addHistory;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_history) != DEF_CAN_FIRE_history)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_history, 1u);
	backing.DEF_CAN_FIRE_history = DEF_CAN_FIRE_history;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_redirect) != DEF_CAN_FIRE_redirect)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_redirect, 1u);
	backing.DEF_CAN_FIRE_redirect = DEF_CAN_FIRE_redirect;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_m_canon_addHistory) != DEF_WILL_FIRE_RL_m_canon_addHistory)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_m_canon_addHistory, 1u);
	backing.DEF_WILL_FIRE_RL_m_canon_addHistory = DEF_WILL_FIRE_RL_m_canon_addHistory;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_m_canon_redirect) != DEF_WILL_FIRE_RL_m_canon_redirect)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_m_canon_redirect, 1u);
	backing.DEF_WILL_FIRE_RL_m_canon_redirect = DEF_WILL_FIRE_RL_m_canon_redirect;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_addHistory) != DEF_WILL_FIRE_addHistory)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_addHistory, 1u);
	backing.DEF_WILL_FIRE_addHistory = DEF_WILL_FIRE_addHistory;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_redirect) != DEF_WILL_FIRE_redirect)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_redirect, 1u);
	backing.DEF_WILL_FIRE_redirect = DEF_WILL_FIRE_redirect;
      }
      ++num;
      if ((backing.DEF__read__h52) != DEF__read__h52)
      {
	vcd_write_val(sim_hdl, num, DEF__read__h52, 12u);
	backing.DEF__read__h52 = DEF__read__h52;
      }
      ++num;
      if ((backing.PORT_EN_addHistory) != PORT_EN_addHistory)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_addHistory, 1u);
	backing.PORT_EN_addHistory = PORT_EN_addHistory;
      }
      ++num;
      if ((backing.PORT_EN_redirect) != PORT_EN_redirect)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_redirect, 1u);
	backing.PORT_EN_redirect = PORT_EN_redirect;
      }
      ++num;
      if ((backing.PORT_RDY_addHistory) != PORT_RDY_addHistory)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_addHistory, 1u);
	backing.PORT_RDY_addHistory = PORT_RDY_addHistory;
      }
      ++num;
      if ((backing.PORT_RDY_history) != PORT_RDY_history)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_history, 1u);
	backing.PORT_RDY_history = PORT_RDY_history;
      }
      ++num;
      if ((backing.PORT_RDY_redirect) != PORT_RDY_redirect)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_redirect, 1u);
	backing.PORT_RDY_redirect = PORT_RDY_redirect;
      }
      ++num;
      if ((backing.PORT_addHistory_num) != PORT_addHistory_num)
      {
	vcd_write_val(sim_hdl, num, PORT_addHistory_num, 1u);
	backing.PORT_addHistory_num = PORT_addHistory_num;
      }
      ++num;
      if ((backing.PORT_addHistory_taken) != PORT_addHistory_taken)
      {
	vcd_write_val(sim_hdl, num, PORT_addHistory_taken, 1u);
	backing.PORT_addHistory_taken = PORT_addHistory_taken;
      }
      ++num;
      if ((backing.PORT_history) != PORT_history)
      {
	vcd_write_val(sim_hdl, num, PORT_history, 12u);
	backing.PORT_history = PORT_history;
      }
      ++num;
      if ((backing.PORT_redirect_newHist) != PORT_redirect_newHist)
      {
	vcd_write_val(sim_hdl, num, PORT_redirect_newHist, 12u);
	backing.PORT_redirect_newHist = PORT_redirect_newHist;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_m_canon_addHistory, 1u);
      backing.DEF_CAN_FIRE_RL_m_canon_addHistory = DEF_CAN_FIRE_RL_m_canon_addHistory;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_m_canon_redirect, 1u);
      backing.DEF_CAN_FIRE_RL_m_canon_redirect = DEF_CAN_FIRE_RL_m_canon_redirect;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_addHistory, 1u);
      backing.DEF_CAN_FIRE_addHistory = DEF_CAN_FIRE_addHistory;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_history, 1u);
      backing.DEF_CAN_FIRE_history = DEF_CAN_FIRE_history;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_redirect, 1u);
      backing.DEF_CAN_FIRE_redirect = DEF_CAN_FIRE_redirect;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_m_canon_addHistory, 1u);
      backing.DEF_WILL_FIRE_RL_m_canon_addHistory = DEF_WILL_FIRE_RL_m_canon_addHistory;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_m_canon_redirect, 1u);
      backing.DEF_WILL_FIRE_RL_m_canon_redirect = DEF_WILL_FIRE_RL_m_canon_redirect;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_addHistory, 1u);
      backing.DEF_WILL_FIRE_addHistory = DEF_WILL_FIRE_addHistory;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_redirect, 1u);
      backing.DEF_WILL_FIRE_redirect = DEF_WILL_FIRE_redirect;
      vcd_write_val(sim_hdl, num++, DEF__read__h52, 12u);
      backing.DEF__read__h52 = DEF__read__h52;
      vcd_write_val(sim_hdl, num++, PORT_EN_addHistory, 1u);
      backing.PORT_EN_addHistory = PORT_EN_addHistory;
      vcd_write_val(sim_hdl, num++, PORT_EN_redirect, 1u);
      backing.PORT_EN_redirect = PORT_EN_redirect;
      vcd_write_val(sim_hdl, num++, PORT_RDY_addHistory, 1u);
      backing.PORT_RDY_addHistory = PORT_RDY_addHistory;
      vcd_write_val(sim_hdl, num++, PORT_RDY_history, 1u);
      backing.PORT_RDY_history = PORT_RDY_history;
      vcd_write_val(sim_hdl, num++, PORT_RDY_redirect, 1u);
      backing.PORT_RDY_redirect = PORT_RDY_redirect;
      vcd_write_val(sim_hdl, num++, PORT_addHistory_num, 1u);
      backing.PORT_addHistory_num = PORT_addHistory_num;
      vcd_write_val(sim_hdl, num++, PORT_addHistory_taken, 1u);
      backing.PORT_addHistory_taken = PORT_addHistory_taken;
      vcd_write_val(sim_hdl, num++, PORT_history, 12u);
      backing.PORT_history = PORT_history;
      vcd_write_val(sim_hdl, num++, PORT_redirect_newHist, 12u);
      backing.PORT_redirect_newHist = PORT_redirect_newHist;
    }
}

void MOD_mkTourGHistReg::vcd_prims(tVCDDumpType dt, MOD_mkTourGHistReg &backing)
{
  INST_m_addHist.dump_VCD(dt, backing.INST_m_addHist);
  INST_m_hist.dump_VCD(dt, backing.INST_m_hist);
  INST_m_redirectHist.dump_VCD(dt, backing.INST_m_redirectHist);
}
